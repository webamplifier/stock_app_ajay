{"version":3,"sources":["screens/Expense/create.js"],"names":["Create","React","useContext","userContext","user","setLoad","useState","expense_date","setExpenseDate","name","setName","allemployees","setAllEmployees","currentEmployee","setCurrentEmployee","allPaymentMethods","setAllPaymentMethods","currentPaymentMethod","setCurrentPaymentMethod","item","setItem","paid_amount","setPaidAmount","remarks","setRemarks","condition","setCondition","useEffect","a","fetch","url","method","headers","token","response","json","data","payment_methods","map","label","ok","status","employee_list","value","id","toast","error","message","fetchPaymentMethods","fetchEmployees","className","onSubmit","e","formData","FormData","append","body","success","preventDefault","submitData","handleSubmit","class","for","onChange","target","type","handleChange","required","options","rows","onClick","window","location","reload"],"mappings":"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","file":"static/js/85.122a3ac1.chunk.js","sourcesContent":["import React from 'react'\nimport Select from 'react-select';\nimport { url } from 'src/helpers/helpers';\nimport { userContext } from '../../context/UserContext'\nimport { toast, ToastContainer } from 'react-toastify';\n\nexport default function Create() {\n    const { user, setLoad } = React.useContext(userContext);\n    const [expense_date, setExpenseDate] = React.useState('');\n    const [name, setName] = React.useState('');\n    const [allemployees, setAllEmployees] = React.useState([]);\n    const [currentEmployee, setCurrentEmployee] = React.useState('');\n    const [allPaymentMethods, setAllPaymentMethods] = React.useState([]);\n    const [currentPaymentMethod, setCurrentPaymentMethod] = React.useState('');\n    const [item, setItem] = React.useState('');\n    const [paid_amount, setPaidAmount] = React.useState('0');\n    const [remarks, setRemarks] = React.useState('');\n    const [condition, setCondition] = React.useState('');\n\n    React.useEffect(() => {\n        async function fetchPaymentMethods() {\n            setLoad(true);\n            const response = await fetch(url + 'getPaymentMethods', {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n            const data = await response.json();\n            setLoad(false);\n            setAllPaymentMethods(data?.payment_methods.map(item => {\n                return {\n                    label: item\n                }\n            }))\n        }\n        fetchPaymentMethods();\n        \n        async function fetchEmployees() {\n            setLoad(true);\n            const response = await fetch(url + 'employeelist', {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n\n            if (response.ok === true) {\n                const data = await response.json();\n                setLoad(false)\n                if (data.status === 200) {\n                    setAllEmployees(data?.employee_list.map(item => {\n                        return {\n                            value: item.id,\n                            label: item.name\n                        }\n                    }))\n                } else {\n                    toast.error(data.message)\n                }\n            }\n        }\n        fetchEmployees();\n    }, [])\n\n    const handleChange = e =>{\n        setCondition(e.target.value);\n        if(e.target.value === \"salary\"){\n            setItem(\"salary\");\n        }\n    }\n    \n    const handleSubmit = e => {\n        setLoad(true)\n        e.preventDefault();\n\n        async function submitData() {\n            if (paid_amount && item && condition && currentPaymentMethod) {\n                const formData = new FormData();\n                if (condition === 'salary') {\n                    formData.append('expense_date', expense_date);\n                    formData.append('condition', condition);\n                    formData.append('name', currentEmployee.label);\n                    formData.append('employee_id', currentEmployee.value);\n                    formData.append('payment_method', currentPaymentMethod.label);\n                    formData.append('paid_amount', paid_amount);\n                    formData.append('item', item);\n                    formData.append('remarks', remarks);\n                }\n                else {\n                    formData.append('expense_date', expense_date);\n                    formData.append('condition', condition);\n                    formData.append('name', name);\n                    formData.append('payment_method', currentPaymentMethod.label);\n                    formData.append('paid_amount', paid_amount);\n                    formData.append('item', item);\n                    formData.append('remarks', remarks);\n                }\n\n                const response = await fetch(url + 'createexpense', {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': user?.token\n                    },\n                    body: formData\n                })\n\n                if (response.ok === true) {\n                    const data = await response.json();\n                    setLoad(false);\n                    if (data.status === 200) {\n                        toast.success(data.message);\n                        setExpenseDate('');\n                        setCondition('');\n                        setName('');\n                        setCurrentEmployee('');\n                        setCurrentPaymentMethod('');\n                        setItem('');\n                        setPaidAmount(0);\n                        setRemarks('');\n                    } else {\n                        toast.error(data.message)\n                    }\n                }\n            }\n            else {\n                toast.error('Please fill the data with *');\n            }\n        }\n        submitData();\n    }\n\n    return (\n        <div className=\"container create-page-main-section\">\n            <ToastContainer />\n            <form onSubmit={e => handleSubmit(e)}>\n                <div className='p-sm-5 create-form-field'>\n                    <div class=\"form-group row\">\n                        <label for=\"inputDate\" class=\"col-sm-2 col-form-label\">Expense Date</label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <input value={expense_date} onChange={e => setExpenseDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"inputDate\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label for=\"inputname\" class=\"col-sm-2 col-form-label\">Condition<span className='required-label'>*</span></label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <select value={condition} onChange={e => handleChange(e)} class=\"form-control\" required>\n                                <option value=\"\">Select Condition</option>\n                                <option value='expense'>Expense</option>\n                                <option value='salary'>Salary</option>\n                            </select>\n                        </div>\n                    </div>\n                    {condition === 'expense' ?\n                        <div class=\"form-group row\">\n                            <label for=\"inputname\" class=\"col-sm-2 col-form-label\">To:<span className='required-label'>*</span></label>\n                            <div class=\"d-flex align-items-sm-center col-sm-10\">\n                                <input required value={name} onChange={e => setName(e.target.value)} type=\"text\" class=\"form-control\" id=\"inputname\" />\n                            </div>\n                        </div> : null}\n                    {condition === 'salary' ?\n                        <div class=\"form-group row\">\n                            <label for=\"inputname\" class=\"col-sm-2 col-form-label\">To:<span className='required-label'>*</span></label>\n                            <div class=\"col-sm-10\">\n                                <Select options={allemployees} value={currentEmployee} onChange={setCurrentEmployee} />\n                            </div>\n                        </div> : null}\n                    <div class=\"form-group row\">\n                        <label for=\"inputItem\" class=\"col-sm-2 col-form-label\">Item<span className='required-label'>*</span></label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <input required value={item} onChange={e => setItem(e.target.value)} type=\"text\" class=\"form-control\" id=\"inputItem\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label for=\"inputItem\" class=\"col-sm-2 col-form-label\">Payment Method<span className='required-label'>*</span></label>\n                        <div class=\"col-sm-10\">\n                                <Select options={allPaymentMethods} value={currentPaymentMethod} onChange={setCurrentPaymentMethod} />\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label for=\"inputPrice\" class=\"col-sm-2 col-form-label\">Paid Amount<span className='required-label'>*</span></label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <input required value={paid_amount} onChange={e => setPaidAmount(e.target.value)} type=\"text\" class=\"form-control\" id=\"inputPrice\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-sm-2 col-form-label\" for=\"exampleFormControlTextarea1\">Remarks:</label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <textarea value={remarks} onChange={e => setRemarks(e.target.value)} class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\"></textarea>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"d-flex justify-content-center create-catagory-btns\">\n                    <button type=\"reset\" class=\"font-weight-bold m-3 py-2 px-4 btn btn-danger\" onClick={() => window.location.reload()} >Cancel<i\n                        class=\"px-2 fa fa-times\" aria-hidden=\"true\"></i></button>\n                    <button type=\"submit\" class=\"font-weight-bold m-3 py-2 px-4 btn btn-success\">Save<i\n                        class=\"px-2 fa fa-floppy-o\" aria-hidden=\"true\"></i></button>\n                </div>\n            </form>\n        </div>\n    )\n}"],"sourceRoot":""}