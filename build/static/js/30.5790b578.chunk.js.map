{"version":3,"sources":["components/CustomModal.js","screens/Reports/QuotationReport.js"],"names":["CustomModal","props","modal","setModal","deleteEntry","className","show","onClose","closeButton","onClick","color","SalesReport","React","useContext","userContext","user","setLoad","useState","quotationList","setQuotationList","from_Date","setFromDate","to_Date","setToDate","id","setId","total","setTotal","useEffect","a","fetch","url","method","headers","token","response","ok","json","data","status","list","map","item","index","quotation_number","customer_name","formatDate","quotation_date","split","total_after_roundoff","remain_amount","parseInt","total_records","toast","error","message","fetchData","columns","key","text","sortable","width","cell","record","to","style","marginRight","cursor","showModal","class","value","query","handleChange","e","page_number","page_size","filter_value","sort_order","sort","JSON","stringify","deleteData","onSubmit","preventDefault","submit","catch","err","handleSubmit","for","onChange","target","type","required","config","length_menu","button","excel","print","extra","records","total_record","dynamic"],"mappings":"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","file":"static/js/30.5790b578.chunk.js","sourcesContent":["import { CButton, CModal, CModalBody, CModalFooter, CModalHeader } from '@coreui/react'\nimport React from 'react'\n\nexport default function CustomModal(props) {\n    const { modal, setModal, deleteEntry } = props;\n\n    return (\n        <div className='delete_modal_box'>\n            <CModal\n                show={modal}\n                onClose={setModal}\n            >\n                <CModalHeader closeButton>\n                </CModalHeader>\n                <CModalBody className='delete_modal_body'>\n                    <p> Are you sure you want to delete this record ?</p>\n                    <div className='btn-div-modal-group delete_modal_Btns'>\n                        <button onClick={() => deleteEntry()} className='delete_modal_yes_Btn'>Yes, Approve</button>\n                        <button className='btn btn-primary delete_modal_cancel_Btn' color=\"secondary\" onClick={() => setModal(false)}>Cancel</button>\n                    </div>\n                </CModalBody>\n            </CModal>\n        </div>\n    )\n}\n","import React,{Fragment} from 'react';\nimport ReactDatatable from '@ashvin27/react-datatable';\nimport { Link } from 'react-router-dom';\nimport { url } from 'src/helpers/helpers';\nimport { toast, ToastContainer } from 'react-toastify'\nimport { userContext } from '../../context/UserContext'\nimport CustomModal from '../../components/CustomModal';\nimport { formatDate } from 'src/helpers/helpers';\nexport default function SalesReport() {\n    const { user,setLoad } = React.useContext(userContext);\n    const [quotationList, setQuotationList] = React.useState([]);\n    const [modal, setModal] = React.useState(false);\n    const [from_Date, setFromDate] = React.useState('');\n    const [to_Date, setToDate] = React.useState('');\n    const [id, setId] = React.useState('');\n    const [total,setTotal] = React.useState(0); \n\n    const deleteEntry = () => {\n        setLoad(true)\n        async function deleteData() {\n            const response = await fetch(url + 'deleteQuotation/' + id, {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n\n            const data = await response.json();\n            \n            if (data.status === 200) {\n                setModal(false);\n                setId('');\n                async function fetchData() {\n                    const response = await fetch(url + 'fetchQuotationList', {\n                        method: 'GET',\n                        headers: {\n                            'Authorization': user?.token\n                        }\n                    })\n        \n                    if (response.ok === true) {\n                        const data = await response.json();\n                        setLoad(false)\n                        if (data.status === 200) {\n                            setQuotationList(data.list.map((item,index)=>{\n                                return{\n                                   '#': index+1,\n                                   'id': item.id,\n                                   'quotation_number': item.quotation_number,\n                                   'customer_name': item.customer_name,\n                                   'quotation_date': formatDate(item.quotation_date.split(' ')[0]),\n                                   'total_after_roundoff': item.total_after_roundoff,\n                                   'remain_amount': item.remain_amount\n                                }\n                            }));\n                            setTotal(parseInt(data.total_records));\n                        } else {\n                            toast.error(data.message);\n                        }\n                    }\n                }        \n                fetchData();\n            } else {\n                toast.error(data.message)\n            }\n        }\n        deleteData();\n    }\n    React.useEffect(() => {\n        setLoad(true)\n        async function fetchData() {\n            const response = await fetch(url + 'fetchQuotationList', {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n\n            if (response.ok === true) {\n                const data = await response.json();\n                setLoad(false)\n                if (data.status === 200) {\n                    setQuotationList(data.list.map((item,index)=>{\n                        return{\n                           '#': index+1,\n                           'id': item.id,\n                           'quotation_number': item.quotation_number,\n                           'customer_name': item.customer_name,\n                           'quotation_date': formatDate(item.quotation_date.split(' ')[0]),\n                           'total_after_roundoff': item.total_after_roundoff,\n                           'remain_amount': item.remain_amount\n                        }\n                    }));\n                    setTotal(parseInt(data.total_records));\n                } else {\n                    toast.error(data.message);\n                }\n            }\n        }\n\n        fetchData();\n    }, [])\n\n    const columns = [\n        {\n            key: \"#\",\n            text: \"#\",\n            className: \"#\",\n            sortable: false,\n        },\n        {\n            key: \"quotation_number\",\n            text: \"Quotation No\",\n            className: \"quotation_number\",\n            sortable: true\n        },\n        {\n            key: \"quotation_date\",\n            text: \"Quotation Date\",\n            className: \"quotation_date\",\n            sortable: true\n        },\n        {\n            key: \"customer_name\",\n            text: \"Customer Name\",\n            className: \"customer_name\",\n            sortable: true\n        },\n        {\n            key: \"total_after_roundoff\",\n            text: \"Bill Amount\",\n            className: \"bill_amount\",\n            sortable: true\n        },\n        {\n            key: \"remain_amount\",\n            text: \"Remain Amount\",\n            className: \"remain_amount\",\n            sortable: true\n        },\n        {\n            key: \"action\",\n            text: \"Action\",\n            className: \"action\",\n            width: 100,\n            sortable: false,\n            cell: record => { \n                return (\n                    <Fragment>\n                        <Link\n                            to={`/edit/quotation/${record.id}`} \n                            style={{marginRight: '5px'}}>    \n                            <i className=\"fa fa-pencil mr-2\"></i>\n                        </Link>\n                        <i \n                        style={{ cursor: \"pointer\" }} \n                        onClick={() => showModal(record.id)} \n                        class=\"fa fa-trash\" \n                        aria-hidden=\"true\">   \n                        </i>\n                    </Fragment>\n                );\n            }\n        }\n    ];\n    const config = {\n        page_size: 10,\n        length_menu: [ 10, 20, 50 ],\n        button: {\n            excel: false,\n            print: false,\n            extra: false,\n        }\n    }\n    \n    const showModal = value => {\n        setId(value);\n        setModal(true)\n    }\n\n    async function fetchData(query) {\n        setLoad(true);\n        const response = await fetch(url + query, {\n            method: 'GET',\n            headers: {\n                'Authorization': user?.token\n            }\n        })\n        if (response.ok === true) {\n            const data = await response.json();\n            setLoad(false)\n            if (data.status === 200) {\n                setQuotationList(data.list.map((item,index)=>{\n                    return{\n                       '#': index+1,\n                       'id': item.id,\n                       'quotation_number': item.quotation_number,\n                       'customer_name': item.customer_name,\n                       'quotation_date': formatDate(item.quotation_date.split(' ')[0]),\n                       'total_after_roundoff': item.total_after_roundoff,\n                       'remain_amount': item.remain_amount\n                    }\n                }));\n                setTotal(parseInt(data.total_records));\n            } else {\n                toast.error(data.message);\n            }\n        }\n    }\n\n    function handleSubmit(e){\n        e.preventDefault();\n        if (to_Date && from_Date){\n            setLoad(true);\n            async function submit(){\n                const response = await fetch(url + `fetchQuotationList?to=${to_Date}&from=${from_Date}`,{\n                    method : 'GET',\n                    headers : {\n                        'Authorization' : user?.token\n                    },\n                });\n                if (response.ok === true){\n                    const data = await response.json();\n                    setLoad(false)\n                    if (data.status === 200){\n                        setQuotationList(data.list.map((item,index)=>{\n                            return{\n                               '#': index+1,\n                               'id': item.id,\n                               'quotation_number': item.quotation_number,\n                               'customer_name': item.customer_name,\n                               'quotation_date': formatDate(item.quotation_date.split(' ')[0]),\n                               'total_after_roundoff': item.total_after_roundoff,\n                               'remain_amount': item.remain_amount\n                            }\n                        }));\n                        setTotal(parseInt(data.total_records));\n                    }else{\n                        toast.error(data.message)\n                    }\n                }else{\n                    toast.error('Oops something went wrong!')\n                }\n            }\n            submit().catch(err=>toast.error('Internal server error!. Please try again later'))\n        }else{\n            toast.error('Please fill the to and from date')\n        }\n    }\n    const handleChange=(e)=>{\n        let query=`fetchQuotationList?page_number=${e.page_number}&page_size=${e.page_size}&filter_value=${e.filter_value}&to=${to_Date}&from=${from_Date}`;\n        if(e.sort_order){\n            let sort = JSON.stringify(e.sort_order);\n            query=`fetchQuotationList?page_number=${e.page_number}&page_size=${e.page_size}&filter_value=${e.filter_value}&sort_order=${sort}&to=${to_Date}&from=${from_Date}`;\n        }\n        fetchData(query);\n    }\n    return (\n        <section>\n            <ToastContainer />\n            <CustomModal modal={modal} setModal={setModal} deleteEntry={deleteEntry} />\n            <form onSubmit={(e)=>handleSubmit(e)}>\n            <div class=\"form-row create-purchase-header\">\n            <div class=\"form-group col-md-3\">\n            <label for=\"date\">From</label>\n            <input value={from_Date} onChange={e => setFromDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n            </div>\n            <div class=\"form-group col-md-3\">\n            <label for=\"date\">To</label>\n            <input value={to_Date} onChange={e => setToDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n            </div>\n            <div class=\"form-group col-md-3\">\n            <button type=\"Submit\" class=\"font-weight-bold my-4 py-2 px-4 btn btn-success\">Filter</button>\n            </div>\n            </div>\n            </form>\n            <ReactDatatable\n                    config={config}\n                    records={quotationList}\n                    columns={columns}\n                    total_record={total}\n                    onChange={(e)=>handleChange(e)}\n                    dynamic={true}\n                />            \n        </section>\n    )\n}"],"sourceRoot":""}