{"version":3,"sources":["views/charts/ChartLineSimple.js","views/widgets/WidgetsDropdown.js"],"names":["ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","WidgetsDropdown","React","useContext","userContext","user","setLoad","useState","customer_count","setCustomerCount","party_count","setPartyCount","category_count","setCategoryCount","product_count","setProductCount","useEffect","a","fetch","url","method","headers","token","response","ok","json","status","alert","message","fetchData","sm","lg","header","style","paddingBottom","text","toString"],"mappings":"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","file":"static/js/71.e290e26c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n","import React from 'react'\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle\n} from '@coreui/react'\nimport { userContext } from '../../context/UserContext';\nimport { url } from 'src/helpers/helpers';\nimport CIcon from '@coreui/icons-react'\nimport ChartLineSimple from '../charts/ChartLineSimple'\nimport ChartBarSimple from '../charts/ChartBarSimple'\n\nconst WidgetsDropdown = () => {\n  \n  const { user,setLoad } = React.useContext(userContext);\n  const [customer_count,setCustomerCount] = React.useState(0);\n  const [party_count, setPartyCount] = React.useState(0);\n  const [category_count, setCategoryCount] = React.useState(0);\n  const [product_count, setProductCount] = React.useState(0);\n  \n  React.useEffect(()=>{\n    async function fetchData() {\n      setLoad(true);\n      const response = await fetch(url + 'fetchTotalCount', {\n          method: 'GET',\n          headers: {\n              'Authorization': user?.token\n          }\n      })\n\n      if (response.ok === true) {\n          const data = await response.json();\n          setLoad(false);\n          if (data.status === 200) {\n              setCustomerCount(data.customer_count);\n              setPartyCount(data.party_count);\n              setCategoryCount(data.category_count);\n              setProductCount(data.product_count);\n          } else {\n              alert(data.message);\n          }\n      }\n  }\n  fetchData();\n  },[])\n\n  return (\n    <CRow>\n      <CCol sm=\"6\" lg=\"6\">\n        <CWidgetDropdown\n          color=\"primary\"\n          header=\"Customers\"\n          style={{paddingBottom : 30}}\n          text= {customer_count.toString()}\n        >\n        </CWidgetDropdown>\n      </CCol>\n      <CCol sm=\"6\" lg=\"6\">\n        <CWidgetDropdown\n          color=\"info\"\n          header=\"Products\"\n          style={{paddingBottom : 30}}\n          text={product_count.toString()}\n        >\n        </CWidgetDropdown>\n      </CCol>\n      <CCol sm=\"6\" lg=\"6\">\n        <CWidgetDropdown\n          color=\"warning\"\n          header=\"Parties\"\n          style={{paddingBottom : 30}}\n          text={party_count.toString()}\n        >\n        </CWidgetDropdown>\n      </CCol>\n      <CCol sm=\"6\" lg=\"6\">\n        <CWidgetDropdown\n          color=\"gradient-primary\"\n          header=\"Categories\"\n          style={{paddingBottom : 30}}\n          text={category_count.toString()}\n        >\n        </CWidgetDropdown>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n"],"sourceRoot":""}