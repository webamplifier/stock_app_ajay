{"version":3,"sources":["screens/Reports/DetailTransactionReport.js"],"names":["DetailTransactionReport","id","useParams","React","useContext","userContext","user","setLoad","useState","Date","from_Date","setFromDate","to_Date","setToDate","outAmount","setTotalOutAmount","inAmount","setTotalInAmount","transactionlist","setTransactionList","class","for","className","value","onChange","e","target","type","required","onClick","preventDefault","submit","a","fetch","url","method","headers","token","body","formData","response","ok","json","data","status","parseFloat","out_amount","toFixed","in_amount","transaction_list","toast","error","message","FormData","append","catch","err","handleSubmit","html","document","getElementById","innerHTML","myWindow","window","open","write","close","onload","focus","print","exportPDF","length","scope","map","item","index","formatDateTime","date_time","condition","amount"],"mappings":"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","file":"static/js/91.6bf9c425.chunk.js","sourcesContent":["import React from 'react';\nimport { url } from 'src/helpers/helpers';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { userContext } from '../../context/UserContext';\nimport { formatDateTime } from '../../helpers/helpers';\nimport { useParams } from 'react-router-dom';\n\nexport default function DetailTransactionReport() {\n    let { id } = useParams();\n    const { user, setLoad } = React.useContext(userContext);\n    const [from_Date, setFromDate] = React.useState(new Date());\n    const [to_Date, setToDate] = React.useState(new Date());\n    const [outAmount, setTotalOutAmount] = React.useState(0);\n    const [inAmount, setTotalInAmount] = React.useState(0);\n    const [transactionlist, setTransactionList] = React.useState([]);\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (to_Date && from_Date) {\n            setLoad(true)\n            const formData = new FormData();\n            formData.append('id', id);\n            formData.append('to', to_Date);\n            formData.append('from', from_Date);\n            async function submit() {\n                const response = await fetch(url + 'detailTransactionReport', {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': user?.token\n                    },\n                    body: formData\n                });\n\n                if (response.ok === true) {\n                    const data = await response.json();\n                    setLoad(false)\n                    if (data.status === 200) {\n                        setTotalOutAmount(parseFloat(data.out_amount).toFixed(2));\n                        setTotalInAmount(parseFloat(data.in_amount).toFixed(2));\n                        setTransactionList(data.transaction_list);\n                    } else {\n                        toast.error(data.message)\n                    }\n                } else {\n                    toast.error('Oops something went wrong!')\n                }\n            }\n\n            submit().catch(err => toast.error('Internal server error!. Please try again later'))\n        } else {\n            toast.error('Please fill the to and from date')\n        }\n    }\n\n    function exportPDF() {\n        const html = document.getElementById('export-table').innerHTML;\n        var myWindow = window.open('', 'Receipt');\n        myWindow.document.write('<html><head><title>Receipt</title>');\n        myWindow.document.write('<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css\" integrity=\"sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn\" crossorigin=\"anonymous\">')\n        myWindow.document.write(\"</head><body>\");\n        myWindow.document.write(html);\n        myWindow.document.write('</body></html>');\n        myWindow.document.close();\n\n        myWindow.onload = function () {\n            myWindow.focus();\n            myWindow.print();\n        }\n    }\n    return (\n        <section>\n            <ToastContainer />\n            <div class=\"d-flex\">\n                <form class=\"col-md-10 m-0 p-0\">\n                    <div class=\"form-row m-0 p-0 create-purchase-header\">\n                        <div class=\"form-group col-md-3\">\n                            <label for=\"date\">From<span className='required-label'>*</span></label>\n                            <input value={from_Date} onChange={e => setFromDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n                        </div>\n                        <div class=\"form-group col-md-3\">\n                            <label for=\"date\">To<span className='required-label'>*</span></label>\n                            <input value={to_Date} onChange={e => setToDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                            <button type=\"submit\" class=\"font-weight-bold my-4 py-2 px-4 btn btn-success\" onClick={(e) => handleSubmit(e)}>Submit</button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"col-md-2\">\n                    <button onClick={() => exportPDF()} class=\"font-weight-bold my-4 px-3 py-2 btn btn-success\">Export as PDF</button>\n                </div>\n            </div>\n            {/* table code */}\n            <div id=\"export-table\">\n                {transactionlist.length > 0 && (\n                    <>\n                        <h6 className='text-center mt-4 font-weight-bold'>Transactions List</h6>\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">#</th>\n                                    <th scope=\"col\">Date</th>\n                                    <th scope=\"col\">Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {transactionlist.map((item,index) => {\n                                    return (\n                                        <tr>\n                                            <th scope=\"row\">{++index}</th>\n                                            <td>{formatDateTime(item.date_time)}</td>\n                                            <td>{item.condition===\"incoming\" ? \"+ \" : \"- \"}{item.amount}</td>\n                                        </tr>\n                                    )\n                                }\n                                )}\n                            </tbody>\n                        </table>\n                    </>\n                )}\n                <hr />\n                \n                <h6 className='float-left ml-2'>In : {parseFloat(inAmount).toFixed(2)}</h6>\n                <h6 className='float-left ml-5'>Out : {parseFloat(outAmount).toFixed(2)}</h6>\n                <h6 className='float-right mr-3'>Total Amount: {parseFloat(parseFloat(inAmount).toFixed(2)- parseFloat(outAmount).toFixed(2)).toFixed(2)} </h6>\n            </div>\n        </section >\n    )\n}"],"sourceRoot":""}