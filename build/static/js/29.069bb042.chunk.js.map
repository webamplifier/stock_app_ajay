{"version":3,"sources":["components/CustomModal.js","screens/Reports/ExpenseReport.js"],"names":["CustomModal","props","modal","setModal","deleteEntry","className","show","onClose","closeButton","onClick","color","ExpenseReport","React","useContext","userContext","user","setLoad","useState","expenseList","setExpenseList","from_Date","setFromDate","to_Date","setToDate","id","setId","total","setTotal","useEffect","a","fetch","url","method","headers","token","response","ok","json","data","status","list","map","item","index","formatDate","expense_date","split","condition","name","item_name","payment_method","paid_amount","parseInt","total_records","toast","error","message","fetchData","columns","key","text","sortable","width","cell","record","to","style","marginRight","cursor","showModal","class","value","query","handleChange","e","page_number","page_size","filter_value","sort_order","sort","JSON","stringify","deleteData","onSubmit","preventDefault","submit","catch","err","handleSubmit","for","onChange","target","type","required","config","length_menu","button","excel","print","extra","records","total_record","dynamic"],"mappings":"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","file":"static/js/29.069bb042.chunk.js","sourcesContent":["import { CButton, CModal, CModalBody, CModalFooter, CModalHeader } from '@coreui/react'\nimport React from 'react'\n\nexport default function CustomModal(props) {\n    const { modal, setModal, deleteEntry } = props;\n\n    return (\n        <div className='delete_modal_box'>\n            <CModal\n                show={modal}\n                onClose={setModal}\n            >\n                <CModalHeader closeButton>\n                </CModalHeader>\n                <CModalBody className='delete_modal_body'>\n                    <p> Are you sure you want to delete this record ?</p>\n                    <div className='btn-div-modal-group delete_modal_Btns'>\n                        <button onClick={() => deleteEntry()} className='delete_modal_yes_Btn'>Yes, Approve</button>\n                        <button className='btn btn-primary delete_modal_cancel_Btn' color=\"secondary\" onClick={() => setModal(false)}>Cancel</button>\n                    </div>\n                </CModalBody>\n            </CModal>\n        </div>\n    )\n}\n","import React, { Fragment } from 'react';\nimport ReactDatatable from '@ashvin27/react-datatable';\nimport { Link } from 'react-router-dom';\nimport { url } from 'src/helpers/helpers';\nimport { toast, ToastContainer } from 'react-toastify'\nimport { userContext } from '../../context/UserContext'\nimport CustomModal from '../../components/CustomModal';\nimport { formatDate } from 'src/helpers/helpers';\n\nexport default function ExpenseReport() {\n    const { user, setLoad } = React.useContext(userContext);\n    const [expenseList, setExpenseList] = React.useState([]);\n    const [modal, setModal] = React.useState(false);\n    const [from_Date, setFromDate] = React.useState('');\n    const [to_Date, setToDate] = React.useState('');\n    const [id, setId] = React.useState('');\n    const [total, setTotal] = React.useState(0);\n    const deleteEntry = () => {\n        setLoad(true)\n        async function deleteData() {\n            const response = await fetch(url + 'deleteexpense/' + id, {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n\n            const data = await response.json();\n            if (data.status === 200) {\n                setModal(false);\n                setId('');\n                async function fetchData() {\n                    const response = await fetch(url + 'fetchExpenseList', {\n                        method: 'GET',\n                        headers: {\n                            'Authorization': user?.token\n                        }\n                    })\n                    if (response.ok === true) {\n                        const data = await response.json();\n                        setLoad(false)\n                        if (data.status === 200) {\n                            setExpenseList(data.list.map((item, index) => {\n                                return {\n                                    '#': index + 1,\n                                    'id': item.id,\n                                    'expense_date': formatDate(item.expense_date.split(' ')[0]),\n                                    'name': item.name,\n                                    'condition': item.condition,\n                                    'item_name': item.item_name,\n                                    'payment_method': item.payment_method,\n                                    'paid_amount': item.paid_amount\n                                }\n                            }));\n                            setTotal(parseInt(data.total_records));\n                        } else {\n                            toast.error(data.message);\n                        }\n                    }\n                }\n                fetchData();\n            } else {\n                toast.error(data.message)\n            }\n        }\n        deleteData();\n    }\n    React.useEffect(() => {\n        setLoad(true)\n        async function fetchData() {\n            const response = await fetch(url + 'fetchExpenseList', {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n\n            if (response.ok === true) {\n                const data = await response.json();\n                setLoad(false)\n                if (data.status === 200) {\n                    setExpenseList(data.list.map((item, index) => {\n                        return {\n                            '#': index + 1,\n                            'id': item.id,\n                            'expense_date': formatDate(item.expense_date.split(' ')[0]),\n                            'condition': item.condition,\n                            'name': item.name,\n                            'item_name': item.item_name,\n                            'payment_method': item.payment_method,\n                            'paid_amount': item.paid_amount\n                        }\n                    }));\n                    setTotal(parseInt(data.total_records));\n                } else {\n                    toast.error(data.message);\n                }\n            }\n        }\n\n        fetchData();\n    }, [])\n\n    const columns = [\n        {\n            key: \"#\",\n            text: \"#\",\n            className: \"#\",\n            sortable: false,\n        },\n        {\n            key: \"expense_date\",\n            text: \"Expense Date\",\n            className: \"expense_date\",\n            sortable: true\n        },\n        {\n            key: \"condition\",\n            text: \"Condition\",\n            className: \"condition\",\n            sortable: true\n        },\n        {\n            key: \"name\",\n            text: \"To\",\n            className: \"name\",\n            sortable: true\n        },\n        {\n            key: \"item_name\",\n            text: \"Item\",\n            className: \"item_name\",\n            sortable: true\n        },\n        {\n            key: \"payment_method\",\n            text: \"Payment Method\",\n            className: \"payment_method\",\n            sortable: true\n        },\n        {\n            key: \"paid_amount\",\n            text: \"Paid Amount\",\n            className: \"paid_amount\",\n            sortable: true\n        },\n        {\n            key: \"action\",\n            text: \"Action\",\n            className: \"action\",\n            width: 100,\n            sortable: false,\n            cell: record => {\n                return (\n                    <Fragment>\n                        <Link\n                            to={`/edit/expense/${record.id}`}\n                            style={{ marginRight: '5px' }}>\n                            <i className=\"fa fa-pencil mr-2\"></i>\n                        </Link>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => showModal(record.id)}\n                            class=\"fa fa-trash\"\n                            aria-hidden=\"true\">\n                        </i>\n                    </Fragment>\n                );\n            }\n        }\n    ];\n    const config = {\n        page_size: 10,\n        length_menu: [10, 20, 50],\n        button: {\n            excel: false,\n            print: false,\n            extra: false,\n        }\n    }\n\n    const showModal = value => {\n        setId(value);\n        setModal(true)\n    }\n\n    async function fetchData(query) {\n        setLoad(true);\n        const response = await fetch(url + query, {\n            method: 'GET',\n            headers: {\n                'Authorization': user?.token\n            }\n        })\n        if (response.ok === true) {\n            const data = await response.json();\n            setLoad(false)\n            if (data.status === 200) {\n                setExpenseList(data.list.map((item, index) => {\n                    return {\n                        '#': index + 1,\n                        'id': item.id,\n                        'expense_date': formatDate(item.expense_date.split(' ')[0]),\n                        'name': item.name,\n                        'condition': item.condition,\n                        'item_name': item.item_name,\n                        'payment_method': item.payment_method,\n                        'paid_amount': item.paid_amount\n                    }\n                }));\n                setTotal(parseInt(data.total_records));\n            } else {\n                toast.error(data.message);\n            }\n        }\n    }\n\n    function handleSubmit(e){\n        e.preventDefault();\n        if (to_Date && from_Date){\n            setLoad(true)\n            async function submit() {\n                const response = await fetch(url + `fetchExpenseList?to=${to_Date}&from=${from_Date}`, {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': user?.token\n                    },\n                });\n                if (response.ok === true) {\n                    const data = await response.json();\n                    setLoad(false)\n                    if (data.status === 200) {\n                        setExpenseList(data.list.map((item, index) => {\n                            return {\n                                '#': index + 1,\n                                'id': item.id,\n                                'expense_date': formatDate(item.expense_date.split(' ')[0]),\n                                'name': item.name,\n                                'condition': item.condition,\n                                'item_name': item.item_name,\n                                'payment_method': item.payment_method,\n                                'paid_amount': item.paid_amount\n                            }\n                        }));\n                        setTotal(parseInt(data.total_records));\n                    } else {\n                        toast.error(data.message)\n                    }\n                } else {\n                    toast.error('Oops something went wrong!')\n                }\n            }\n            submit().catch(err => toast.error('Internal server error!. Please try again later'))\n        } else {\n            toast.error('Please fill the to and from date')\n        }\n    }\n    const handleChange = (e) => {\n        let query = `fetchExpenseList?page_number=${e.page_number}&page_size=${e.page_size}&filter_value=${e.filter_value}&to=${to_Date}&from=${from_Date}`;\n        if (e.sort_order) {\n            let sort = JSON.stringify(e.sort_order);\n            query = `fetchExpenseList?page_number=${e.page_number}&page_size=${e.page_size}&filter_value=${e.filter_value}&sort_order=${sort}&to=${to_Date}&from=${from_Date}`;\n        }\n        fetchData(query);\n    }\n    return (\n        <section>\n            <ToastContainer />\n            <CustomModal modal={modal} setModal={setModal} deleteEntry={deleteEntry} />\n            <form onSubmit={e=>handleSubmit(e)}>\n            <div class=\"form-row create-purchase-header\">\n            <div class=\"form-group col-md-3\">\n            <label for=\"date\">From</label>\n            <input value={from_Date} onChange={e => setFromDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n            </div>\n            <div class=\"form-group col-md-3\">\n            <label for=\"date\">To</label>\n            <input value={to_Date} onChange={e => setToDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n            </div>\n            <div class=\"form-group col-md-3\">\n            <button type=\"Submit\" class=\"font-weight-bold my-4 py-2 px-4 btn btn-success\">Filter</button>\n            </div>\n            </div>\n            </form>\n            <ReactDatatable\n                config={config}\n                records={expenseList}\n                columns={columns}\n                total_record={total}\n                onChange={(e) => handleChange(e)}\n                dynamic={true}\n            />\n        </section>\n    )\n}\n"],"sourceRoot":""}