{"version":3,"sources":["components/CustomModal.js","components/PayModal.js","screens/Reports/PurchaseReturnReport.js"],"names":["CustomModal","props","modal","setModal","deleteEntry","className","show","onClose","closeButton","onClick","color","PayModal","React","useContext","userContext","user","setLoad","paymodal","setPayModal","payBill","payAmount","setPayAmount","paymentMode","setPaymentMode","useState","allPaymentMethods","setAllPaymentMethods","useEffect","a","fetch","url","method","headers","token","response","json","data","payment_methods","map","item","label","fetchPaymentMethods","htmlFor","type","value","onChange","e","target","options","PurchaseReport","purchaseReturnList","setPurchaseReturnList","from_Date","setFromDate","to_Date","setToDate","id","setId","total","setTotal","ok","status","list","index","invoice_number","party_name","warehouse_name","formatDate","purchase_return_date","split","total_supply","remain_amount","parseInt","total_records","toast","error","message","fetchData","columns","key","text","sortable","width","cell","record","parseFloat","style","cursor","payModal","to","marginRight","showModal","class","query","handleChange","page_number","page_size","filter_value","sort_order","sort","JSON","stringify","deleteData","formData","FormData","append","body","payBillServer","onSubmit","preventDefault","submit","catch","err","handleSubmit","for","required","config","length_menu","button","excel","print","extra","records","total_record","dynamic"],"mappings":"6KAAA,8DAGe,SAASA,EAAYC,GAChC,IAAQC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,SAAUC,EAAgBH,EAAhBG,YAEzB,OACI,qBAAKC,UAAU,mBAAf,SACI,eAAC,KAAD,CACIC,KAAMJ,EACNK,QAASJ,EAFb,UAII,cAAC,KAAD,CAAcK,aAAW,IAEzB,eAAC,KAAD,CAAYH,UAAU,oBAAtB,UACI,+EACA,sBAAKA,UAAU,wCAAf,UACI,wBAAQI,QAAS,kBAAML,KAAeC,UAAU,uBAAhD,0BACA,wBAAQA,UAAU,0CAA0CK,MAAM,YAAYD,QAAS,kBAAMN,GAAS,IAAtG,iC,uKCZT,SAASQ,EAASV,GAC7B,MAAyBW,IAAMC,WAAWC,KAAlCC,EAAR,EAAQA,KAAKC,EAAb,EAAaA,QACLC,EAAyFhB,EAAzFgB,SAAUC,EAA+EjB,EAA/EiB,YAAaC,EAAkElB,EAAlEkB,QAASC,EAAyDnB,EAAzDmB,UAAWC,EAA8CpB,EAA9CoB,aAAcC,EAAgCrB,EAAhCqB,YAAaC,EAAmBtB,EAAnBsB,eAC9E,EAAkDX,IAAMY,SAAS,IAAjE,mBAAOC,EAAP,KAA0BC,EAA1B,KAyBA,OAvBAd,IAAMe,WAAU,WAAI,4CAChB,8BAAAC,EAAA,6DACIZ,GAAQ,GADZ,SAE2Ba,MAAMC,IAAM,oBAAqB,CACpDC,OAAQ,MACRC,QAAS,CACL,qBAAiBjB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMkB,SALnC,cAEUC,EAFV,gBAQuBA,EAASC,OARhC,OAQUC,EARV,OASIpB,GAAQ,GACRU,EAAoB,OAACU,QAAD,IAACA,OAAD,EAACA,EAAMC,gBAAgBC,KAAI,SAAAC,GAC3C,MAAO,CACHC,MAAOD,OAGfhB,EAAe,CACXiB,MAAO,SAhBf,6CADgB,uBAAC,WAAD,wBAoBhBC,KACF,IAIE,qBAAKpC,UAAU,mBAAf,SACI,eAAC,KAAD,CACIC,KAAMW,EACNV,QAASW,EAFb,UAII,cAAC,KAAD,CAAcV,aAAW,EAAzB,sBAGA,eAAC,KAAD,CAAYH,UAAU,oBAAtB,UACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,SACI,sBAAKA,UAAU,aAAf,UACI,uBAAOqC,QAAQ,GAAf,yBACA,uBAAOC,KAAK,OAAOC,MAAOxB,EAAWyB,SAAU,SAAAC,GAAC,OAAIzB,EAAayB,EAAEC,OAAOH,QAAQvC,UAAU,sBAGpG,qBAAKA,UAAU,QAAf,SACI,sBAAKA,UAAU,aAAf,UACI,uBAAOqC,QAAQ,GAAf,4BACA,cAAC,IAAD,CAAQM,QAASvB,EAAmBmB,MAAOtB,EAAauB,SAAUtB,YAI9E,wBAAQoB,KAAK,SAASlC,QAAS,kBAAIU,KAAWd,UAAU,gCAAxD,8B,wNCjDL,SAAS4C,IACpB,MAAyBrC,IAAMC,WAAWC,KAAlCC,EAAR,EAAQA,KAAKC,EAAb,EAAaA,QACb,EAAoDJ,IAAMY,SAAS,IAAnE,mBAAO0B,EAAP,KAA2BC,EAA3B,KACA,EAA0BvC,IAAMY,UAAS,GAAzC,mBAAOtB,EAAP,KAAcC,EAAd,KACA,EAAkCS,IAAMY,SAAS,GAAjD,mBAAOJ,EAAP,KAAkBC,EAAlB,KACA,EAAsCT,IAAMY,SAAS,CACjDgB,MAAO,SADX,mBAAOlB,EAAP,KAAoBC,EAApB,KAGA,EAA+BX,IAAMY,UAAS,GAA9C,mBAAOP,EAAP,KAAgBC,EAAhB,KACA,EAAiCN,IAAMY,SAAS,IAAhD,mBAAO4B,EAAP,KAAkBC,EAAlB,KACA,EAA6BzC,IAAMY,SAAS,IAA5C,mBAAO8B,EAAP,KAAgBC,EAAhB,KACA,EAAoB3C,IAAMY,SAAS,IAAnC,mBAAOgC,EAAP,KAAWC,EAAX,KACA,EAAyB7C,IAAMY,SAAS,GAAxC,mBAAOkC,EAAP,KAAaC,EAAb,KAyHA/C,IAAMe,WAAU,WAAM,4CAElB,8BAAAC,EAAA,sEAC2BC,MAAMC,IAAM,0BAA2B,CAC1DC,OAAQ,MACRC,QAAS,CACL,qBAAiBjB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMkB,SAJnC,WAQwB,KAPdC,EADV,QAQiB0B,GARjB,gCAS2B1B,EAASC,OATpC,OAScC,EATd,OAUQpB,GAAQ,GACY,MAAhBoB,EAAKyB,QACLV,EAAsBf,EAAK0B,KAAKxB,KAAI,SAACC,EAAKwB,GACtC,MAAM,CACH,IAAKA,EAAM,EACX,GAAMxB,EAAKiB,GACX,eAAkBjB,EAAKyB,eACvB,WAAczB,EAAK0B,WACnB,eAAkB1B,EAAK2B,eACvB,qBAAwBC,YAAW5B,EAAK6B,qBAAqBC,MAAM,KAAK,IACxE,aAAgB9B,EAAK+B,aACrB,cAAiB/B,EAAKgC,mBAG7BZ,EAASa,SAASpC,EAAKqC,iBAEvBC,IAAMC,MAAMvC,EAAKwC,SA1B7B,4CAFkB,sBAClB5D,GAAQ,GADU,mCAiClB6D,KAED,IA6CH,IAAMC,EAAU,CACZ,CACIC,IAAK,IACLC,KAAM,IACN3E,UAAW,IACX4E,UAAU,GAEd,CACIF,IAAK,iBACLC,KAAM,iBACN3E,UAAW,iBACX4E,UAAU,GAEd,CACIF,IAAK,iBACLC,KAAM,iBACN3E,UAAW,iBACX4E,UAAU,GAEd,CACIF,IAAK,aACLC,KAAM,aACN3E,UAAW,aACX4E,UAAU,GAEd,CACIF,IAAK,uBACLC,KAAM,uBACN3E,UAAW,uBACX4E,UAAU,GAEd,CACIF,IAAK,eACLC,KAAM,cACN3E,UAAW,cACX4E,UAAU,GAEd,CACIF,IAAK,gBACLC,KAAM,gBACN3E,UAAW,gBACX4E,UAAU,GAEd,CACIF,IAAK,SACLC,KAAM,SACN3E,UAAW,SACX6E,MAAO,IACPD,UAAU,EACVE,KAAM,SAAAC,GACF,OACI,eAAC,WAAD,WAC0C,IAArCC,WAAWD,EAAOb,gBAAwB,mBACvCe,MAAO,CAACC,OAAO,WACf9E,QAAS,kBAnMhB,SAAC8B,EAAKiB,GACnBnC,EAAagE,WAAW9C,EAAKgC,gBAC7BrD,GAAY,GACZuC,EAAMD,GAgM2BgC,CAASJ,EAAOA,EAAO5B,KACpCnD,UAAU,mBACV,cAAY,SAGhB,cAAC,IAAD,CACIoF,GAAE,+BAA0BL,EAAO5B,IACnC8B,MAAO,CAACI,YAAa,OAFzB,SAGI,mBAAGrF,UAAU,wBAEjB,mBACAiF,MAAO,CAAEC,OAAQ,WACjB9E,QAAS,kBAAMkF,EAAUP,EAAO5B,KAChCoC,MAAM,cACN,cAAY,eAiB1BD,EAAY,SAAA/C,GACda,EAAMb,GACNzC,GAAS,IA5SwB,8CA+SrC,WAAyB0F,GAAzB,iBAAAjE,EAAA,6DACIZ,GAAQ,GADZ,SAE2Ba,MAAMC,IAAM+D,EAAO,CACtC9D,OAAQ,MACRC,QAAS,CACL,qBAAiBjB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMkB,SALnC,WAQwB,KANdC,EAFV,QAQiB0B,GARjB,iCAS2B1B,EAASC,OATpC,OAScC,EATd,OAUQpB,GAAQ,GACY,MAAhBoB,EAAKyB,QACLV,EAAsBf,EAAK0B,KAAKxB,KAAI,SAACC,EAAKwB,GACtC,MAAM,CACH,IAAKA,EAAM,EACX,GAAMxB,EAAKiB,GACX,eAAkBjB,EAAKyB,eACvB,WAAczB,EAAK0B,WACnB,eAAkB1B,EAAK2B,eACvB,qBAAwBC,YAAW5B,EAAK6B,qBAAqBC,MAAM,KAAK,IACxE,aAAgB9B,EAAK+B,aACrB,cAAiB/B,EAAKgC,mBAG7BZ,EAASa,SAASpC,EAAKqC,iBAEvBC,IAAMC,MAAMvC,EAAKwC,SA1B7B,6CA/SqC,sBA6UrC,IAAMkB,GAAa,SAAChD,GAChB,IAAI+C,EAAM,uCAAD,OAAwC/C,EAAEiD,YAA1C,sBAAmEjD,EAAEkD,UAArE,yBAA+FlD,EAAEmD,aAAjG,eAAoH3C,EAApH,iBAAoIF,GAC7I,GAAGN,EAAEoD,WAAW,CACZ,IAAIC,EAAOC,KAAKC,UAAUvD,EAAEoD,YAC5BL,EAAM,uCAAD,OAAwC/C,EAAEiD,YAA1C,sBAAmEjD,EAAEkD,UAArE,yBAA+FlD,EAAEmD,aAAjG,uBAA4HE,EAA5H,eAAuI7C,EAAvI,iBAAuJF,IAjV/H,qCAmVjCyB,CAAUgB,IAEd,OACI,oCACI,cAAC,IAAD,IACA,cAAC,IAAD,CAAa3F,MAAOA,EAAOC,SAAUA,EAAUC,YA1QnC,WAAM,4CAEtB,gCAAAwB,EAAA,sEAC2BC,MAAMC,IAAM,wBAA0B0B,EAAI,CAC7DzB,OAAQ,MACRC,QAAS,CACL,qBAAiBjB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMkB,SAJnC,cACUC,EADV,gBAQuBA,EAASC,OARhC,OAUwB,OAFdC,EARV,QAUayB,QAGUgB,EAHM,uCAGrB,8BAAAjD,EAAA,sEAC2BC,MAAMC,IAAM,0BAA2B,CAC1DC,OAAQ,MACRC,QAAS,CACL,qBAAiBjB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMkB,SAJnC,WAQwB,KAPdC,EADV,QAQiB0B,GARjB,gCAS2B1B,EAASC,OATpC,OAScC,EATd,OAUQpB,GAAQ,GACY,MAAhBoB,EAAKyB,QACLV,EAAsBf,EAAK0B,KAAKxB,KAAI,SAACC,EAAKwB,GACtC,MAAM,CACH,IAAKA,EAAM,EACX,GAAMxB,EAAKiB,GACX,eAAkBjB,EAAKyB,eACvB,WAAczB,EAAK0B,WACnB,eAAkB1B,EAAK2B,eACvB,qBAAwBC,YAAW5B,EAAK6B,qBAAqBC,MAAM,KAAK,IACxE,aAAgB9B,EAAK+B,aACrB,cAAiB/B,EAAKgC,mBAG7BZ,EAASa,SAASpC,EAAKqC,iBAGvBC,IAAMC,MAAMvC,EAAKwC,SA3B7B,2CAHqB,qDACrBzE,GAAS,GACTsD,EAAM,IAiCNoB,KAEAH,IAAMC,MAAMvC,EAAKwC,SA/CzB,2CAFsB,wBACtB5D,GAAQ,GADc,mCAoDtBsF,MAuNI,cAAC,IAAD,CAAUrF,SAAUA,EAAUC,YAAaA,EAAaE,UAAWA,EAAWC,aAAcA,EAAcC,YAAaA,EAAaH,QA3U5H,WAAM,4CAElB,kCAAAS,EAAA,6DACU2E,EAAW,IAAIC,UACZC,OAAO,aAAcrF,GAC9BmF,EAASE,OAAO,eAAgBnF,EAAYkB,OAHhD,SAI2BX,MAAMC,IAAM,sBAAwB0B,EAAG,CAC1DzB,OAAS,OACTC,QAAU,CACN,cAAkBjB,EAAKkB,OAE3ByE,KAAOH,IATf,YAIUrE,EAJV,yCAa2BA,EAASC,OAbpC,OAe4B,OAFdC,EAbd,QAeiByB,QAGUgB,EAHK,uCAGpB,8BAAAjD,EAAA,sEAC2BC,MAAMC,IAAM,0BAA2B,CAC1DC,OAAQ,MACRC,QAAS,CACL,qBAAiBjB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMkB,SAJnC,WAOwB,KANdC,EADV,QAOiB0B,GAPjB,gCAQ2B1B,EAASC,OARpC,OAQcC,EARd,OASQpB,GAAQ,GACY,MAAhBoB,EAAKyB,QACLV,EAAsBf,EAAK0B,KAAKxB,KAAI,SAACC,EAAKwB,GACtC,MAAM,CACH,IAAKA,EAAM,EACX,GAAMxB,EAAKiB,GACX,eAAkBjB,EAAKyB,eACvB,WAAczB,EAAK0B,WACnB,eAAkB1B,EAAK2B,eACvB,qBAAwBC,YAAW5B,EAAK6B,qBAAqBC,MAAM,KAAK,IACxE,aAAgB9B,EAAK+B,aACrB,cAAiB/B,EAAKgC,mBAG7BZ,EAASa,SAASpC,EAAKqC,iBAEvBC,IAAMC,MAAMvC,EAAKwC,SAzB7B,2CAHoB,qDACpB1D,GAAY,GACZuC,EAAM,IA8BNoB,KAEAH,IAAMC,MAAMvC,EAAKwC,SAjD7B,4CAFkB,wBAClB5D,GAAQ,GADU,mCAuDlB2F,IAoR0JpF,eAAgBA,IACtK,sBAAMqF,SAAU,SAAC9D,GAAD,OAhLxB,SAAsBA,GAElB,GADAA,EAAE+D,iBACEvD,GAAWF,EAAU,CAAC,IAEP0D,EAFM,uCAErB,8BAAAlF,EAAA,sEAC2BC,MAAMC,IAAG,qCAAiCwB,EAAjC,iBAAiDF,GAAY,CACzFrB,OAAS,MACTC,QAAU,CACN,qBAAkBjB,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAMkB,SAJpC,WAQwB,KAPdC,EADV,QAQiB0B,GARjB,iCAS2B1B,EAASC,OATpC,OAScC,EATd,OAUQpB,GAAQ,GACY,MAAhBoB,EAAKyB,QACLV,EAAsBf,EAAK0B,KAAKxB,KAAI,SAACC,EAAKwB,GACtC,MAAM,CACH,IAAKA,EAAM,EACX,GAAMxB,EAAKiB,GACX,eAAkBjB,EAAKyB,eACvB,WAAczB,EAAK0B,WACnB,eAAkB1B,EAAK2B,eACvB,qBAAwBC,YAAW5B,EAAK6B,qBAAqBC,MAAM,KAAK,IACxE,aAAgB9B,EAAK+B,aACrB,cAAiB/B,EAAKgC,mBAG7BZ,EAASa,SAASpC,EAAKqC,iBAEvBC,IAAMC,MAAMvC,EAAKwC,SA1B7B,wBA6BQF,IAAMC,MAAM,8BA7BpB,4CAFqB,qDACrB3D,GAAQ,GAkCR8F,IAASC,OAAM,SAAAC,GAAG,OAAEtC,IAAMC,MAAM,0DAEhCD,IAAMC,MAAM,oCAyISsC,CAAanE,IAAlC,SACA,sBAAK8C,MAAM,kCAAX,UACA,sBAAKA,MAAM,sBAAX,UACA,uBAAOsB,IAAI,OAAX,kBACA,uBAAOtE,MAAOQ,EAAWP,SAAU,SAAAC,GAAC,OAAIO,EAAYP,EAAEC,OAAOH,QAAQD,KAAK,OAAOiD,MAAM,eAAepC,GAAG,OAAO2D,UAAQ,OAExH,sBAAKvB,MAAM,sBAAX,UACA,uBAAOsB,IAAI,OAAX,gBACA,uBAAOtE,MAAOU,EAAST,SAAU,SAAAC,GAAC,OAAIS,EAAUT,EAAEC,OAAOH,QAAQD,KAAK,OAAOiD,MAAM,eAAepC,GAAG,OAAO2D,UAAQ,OAEpH,qBAAKvB,MAAM,sBAAX,SACA,wBAAQjD,KAAK,SAASiD,MAAM,kDAA5B,2BAIA,cAAC,IAAD,CACQwB,OA1ED,CACXpB,UAAW,GACXqB,YAAa,CAAE,GAAI,GAAI,IACvBC,OAAQ,CACJC,OAAO,EACPC,OAAO,EACPC,OAAO,IAqECC,QAASxE,EACT4B,QAASA,EACT6C,aAAcjE,EACdb,SAAU,SAACC,GAAD,OAAKgD,GAAahD,IAC5B8E,SAAS","file":"static/js/16.61e25412.chunk.js","sourcesContent":["import { CButton, CModal, CModalBody, CModalFooter, CModalHeader } from '@coreui/react'\nimport React from 'react'\n\nexport default function CustomModal(props) {\n    const { modal, setModal, deleteEntry } = props;\n\n    return (\n        <div className='delete_modal_box'>\n            <CModal\n                show={modal}\n                onClose={setModal}\n            >\n                <CModalHeader closeButton>\n                </CModalHeader>\n                <CModalBody className='delete_modal_body'>\n                    <p> Are you sure you want to delete this record ?</p>\n                    <div className='btn-div-modal-group delete_modal_Btns'>\n                        <button onClick={() => deleteEntry()} className='delete_modal_yes_Btn'>Yes, Approve</button>\n                        <button className='btn btn-primary delete_modal_cancel_Btn' color=\"secondary\" onClick={() => setModal(false)}>Cancel</button>\n                    </div>\n                </CModalBody>\n            </CModal>\n        </div>\n    )\n}\n","import { CButton, CModal, CModalBody, CModalFooter, CModalHeader } from '@coreui/react'\nimport React from 'react'\nimport Select from 'react-select';\nimport { url } from 'src/helpers/helpers';\nimport { userContext } from '../context/UserContext'\n\nexport default function PayModal(props) {\n    const { user,setLoad } = React.useContext(userContext);\n    const { paymodal, setPayModal, payBill, payAmount, setPayAmount, paymentMode, setPaymentMode } = props;\n    const [allPaymentMethods, setAllPaymentMethods] = React.useState([]);\n    \n    React.useEffect(()=>{\n        async function fetchPaymentMethods() {\n            setLoad(true);\n            const response = await fetch(url + 'getPaymentMethods', {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n            const data = await response.json();\n            setLoad(false);\n            setAllPaymentMethods(data?.payment_methods.map(item => {\n                return {\n                    label: item\n                }\n            }))\n            setPaymentMode({\n                label: \"cash\"\n            });\n        }\n        fetchPaymentMethods(); \n    },[]);\n\n    return (\n        \n        <div className='delete_modal_box'>\n            <CModal\n                show={paymodal}\n                onClose={setPayModal} \n            >\n                <CModalHeader closeButton>\n                    Pay Bill\n                </CModalHeader>\n                <CModalBody className='delete_modal_body'>\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"\">Paid Amount</label>\n                                <input type=\"text\" value={payAmount} onChange={e => setPayAmount(e.target.value)} className='form-control' />\n                            </div>\n                        </div>\n                        <div className=\"col-6\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"\">Payment Method</label>\n                                <Select options={allPaymentMethods} value={paymentMode} onChange={setPaymentMode}/>\n                            </div>\n                        </div>\n                    </div>\n                    <button type='submit' onClick={()=>payBill()} className='col-12 btn btn-secondary mb-5'>Submit</button>\n                </CModalBody>\n            </CModal>\n        </div>\n    \n    )\n}\n","import React,{Fragment} from 'react';\nimport ReactDatatable from '@ashvin27/react-datatable';\nimport { Link } from 'react-router-dom';\nimport { url } from 'src/helpers/helpers';\nimport PayModal from '../../components/PayModal';\nimport { toast, ToastContainer } from 'react-toastify'\nimport { userContext } from '../../context/UserContext'\nimport CustomModal from '../../components/CustomModal';\nimport { formatDate } from 'src/helpers/helpers';\n\nexport default function PurchaseReport() {\n    const { user,setLoad } = React.useContext(userContext);    \n    const [purchaseReturnList, setPurchaseReturnList] = React.useState([]);\n    const [modal, setModal] = React.useState(false);\n    const [payAmount, setPayAmount] = React.useState(0);\n    const [paymentMode, setPaymentMode] = React.useState({\n        label: \"cash\"\n    });\n    const [paymodal,setPayModal] = React.useState(false);\n    const [from_Date, setFromDate] = React.useState('');\n    const [to_Date, setToDate] = React.useState('');\n    const [id, setId] = React.useState('');\n    const [total,setTotal] = React.useState(0); \n    \n    const payBill = () => {\n        setLoad(true)\n        async function payBillServer(){\n            const formData = new FormData();\n            formData.append('pay_amount', payAmount);\n            formData.append('payment_mode', paymentMode.label);\n            const response = await fetch(url + 'pay/purchaseReturn/' + id,{\n                method : 'POST',\n                headers : {\n                    'Authorization' : user.token\n                },\n                body : formData\n            })\n               \n            if (response){\n                const data = await response.json();\n\n                if (data.status === 200){\n                    setPayModal(false);\n                    setId('');\n                    async function fetchData() {\n                        const response = await fetch(url + 'fetchPurchaseReturnList', {\n                            method: 'GET',\n                            headers: {\n                                'Authorization': user?.token\n                            }\n                        })\n                        if (response.ok === true) {\n                            const data = await response.json();\n                            setLoad(false)\n                            if (data.status === 200) {\n                                setPurchaseReturnList(data.list.map((item,index)=>{\n                                    return{\n                                       '#': index+1,\n                                       'id': item.id,\n                                       'invoice_number': item.invoice_number,\n                                       'party_name': item.party_name,\n                                       'warehouse_name': item.warehouse_name,\n                                       'purchase_return_date': formatDate(item.purchase_return_date.split(' ')[0]),\n                                       'total_supply': item.total_supply,\n                                       'remain_amount': item.remain_amount\n                                    }\n                                }));\n                                setTotal(parseInt(data.total_records));    \n                            } else {\n                                toast.error(data.message);\n                            }\n                        }\n                    }\n                    fetchData();\n                }else{\n                    toast.error(data.message);\n                }\n            }\n        }\n        payBillServer();\n    }\n\n    const payModal = (item,id) => {\n        setPayAmount(parseFloat(item.remain_amount))\n        setPayModal(true);\n        setId(id);\n    }\n\n    const deleteEntry = () => {\n        setLoad(true)\n        async function deleteData() {\n            const response = await fetch(url + 'deletePurchaseReturn/' + id, {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n\n            const data = await response.json();\n            \n            if (data.status === 200) {\n                setModal(false);\n                setId('');\n                async function fetchData() {\n                    const response = await fetch(url + 'fetchPurchaseReturnList', {\n                        method: 'GET',\n                        headers: {\n                            'Authorization': user?.token\n                        }\n                    })\n        \n                    if (response.ok === true) {\n                        const data = await response.json();\n                        setLoad(false)\n                        if (data.status === 200) {  \n                            setPurchaseReturnList(data.list.map((item,index)=>{\n                                return{\n                                   '#': index+1,\n                                   'id': item.id,\n                                   'invoice_number': item.invoice_number,\n                                   'party_name': item.party_name,\n                                   'warehouse_name': item.warehouse_name,\n                                   'purchase_return_date': formatDate(item.purchase_return_date.split(' ')[0]),\n                                   'total_supply': item.total_supply,\n                                   'remain_amount': item.remain_amount\n                                }\n                            }));\n                            setTotal(parseInt(data.total_records));\n                        \n                        } else {\n                            toast.error(data.message);\n                        }\n                    }\n                }\n        \n                fetchData();\n            } else {\n                toast.error(data.message)\n            }\n        }\n        deleteData();\n    }\n\n    React.useEffect(() => {\n        setLoad(true)\n        async function fetchData() {\n            const response = await fetch(url + 'fetchPurchaseReturnList', {\n                method: 'GET',\n                headers: {\n                    'Authorization': user?.token\n                }\n            })\n\n            if (response.ok === true) {\n                const data = await response.json();\n                setLoad(false)\n                if (data.status === 200) {\n                    setPurchaseReturnList(data.list.map((item,index)=>{\n                        return{\n                           '#': index+1,\n                           'id': item.id,\n                           'invoice_number': item.invoice_number,\n                           'party_name': item.party_name,\n                           'warehouse_name': item.warehouse_name,\n                           'purchase_return_date': formatDate(item.purchase_return_date.split(' ')[0]),\n                           'total_supply': item.total_supply,\n                           'remain_amount': item.remain_amount\n                        }\n                    }));\n                    setTotal(parseInt(data.total_records));\n                } else {\n                    toast.error(data.message);\n                }\n            }\n        }\n\n        fetchData();\n        \n    }, [])\n\n    function handleSubmit(e){\n        e.preventDefault();\n        if (to_Date && from_Date){\n            setLoad(true)\n            async function submit(){\n                const response = await fetch(url + `fetchPurchaseReturnList?to=${to_Date}&from=${from_Date}`,{\n                    method : 'GET',\n                    headers : {\n                        'Authorization' : user?.token\n                    }\n                });\n                 \n                if (response.ok === true){\n                    const data = await response.json();\n                    setLoad(false)\n                    if (data.status === 200){\n                        setPurchaseReturnList(data.list.map((item,index)=>{\n                            return{\n                               '#': index+1,\n                               'id': item.id,\n                               'invoice_number': item.invoice_number,\n                               'party_name': item.party_name,\n                               'warehouse_name': item.warehouse_name,\n                               'purchase_return_date': formatDate(item.purchase_return_date.split(' ')[0]),\n                               'total_supply': item.total_supply,\n                               'remain_amount': item.remain_amount\n                            }\n                        }));\n                        setTotal(parseInt(data.total_records));\n                    }else{\n                        toast.error(data.message)\n                    }\n                }else{\n                    toast.error('Oops something went wrong!')\n                }\n            }\n\n            submit().catch(err=>toast.error('Internal server error!. Please try again later'))\n        }else{\n            toast.error('Please fill the to and from date')\n        }\n    }\n    \n    const columns = [\n        {\n            key: \"#\",\n            text: \"#\",\n            className: \"#\",\n            sortable: false,\n        },\n        {\n            key: \"invoice_number\",\n            text: \"Invoice_Number\",\n            className: \"invoice_number\",\n            sortable: true\n        },\n        {\n            key: \"warehouse_name\",\n            text: \"Warehouse Name\",\n            className: \"warehouse_name\",\n            sortable: true\n        },\n        {\n            key: \"party_name\",\n            text: \"Party Name\",\n            className: \"party_name\",\n            sortable: true\n        },\n        {\n            key: \"purchase_return_date\",\n            text: \"Purchase Return Date\",\n            className: \"purchase_return_date\",\n            sortable: true\n        },\n        {\n            key: \"total_supply\",\n            text: \"Bill Amount\",\n            className: \"bill_amount\",\n            sortable: true\n        },\n        {\n            key: \"remain_amount\",\n            text: \"Remain Amount\",\n            className: \"remain_amount\",\n            sortable: true\n        },\n        {\n            key: \"action\",\n            text: \"Action\",\n            className: \"action\",\n            width: 100,\n            sortable: false,\n            cell: record => { \n                return (\n                    <Fragment>\n                        {parseFloat(record.remain_amount) !== 0 && <i \n                            style={{cursor:'pointer'}} \n                            onClick={()=>payModal(record,record.id)} \n                            className=\"fa fa-money mr-2\" \n                            aria-hidden=\"true\">  \n                       </i>\n                        }\n                        <Link\n                            to={`/edit/purchaseReturn/${record.id}`} \n                            style={{marginRight: '5px'}}>    \n                            <i className=\"fa fa-pencil mr-2\"></i>\n                        </Link>\n                        <i \n                        style={{ cursor: \"pointer\" }} \n                        onClick={() => showModal(record.id)} \n                        class=\"fa fa-trash\" \n                        aria-hidden=\"true\">   \n                        </i>\n                    </Fragment>\n                );\n            }\n        }\n    ];\n    const config = {\n        page_size: 10,\n        length_menu: [ 10, 20, 50 ],\n        button: {\n            excel: false,\n            print: false,\n            extra: false,\n        }\n    }\n    \n    const showModal = value => {\n        setId(value);\n        setModal(true)\n    }\n\n    async function fetchData(query) {\n        setLoad(true);\n        const response = await fetch(url + query, {\n            method: 'GET',\n            headers: {\n                'Authorization': user?.token\n            }\n        })\n        if (response.ok === true) {\n            const data = await response.json();\n            setLoad(false)\n            if (data.status === 200) {\n                setPurchaseReturnList(data.list.map((item,index)=>{\n                    return{\n                       '#': index+1,\n                       'id': item.id,\n                       'invoice_number': item.invoice_number,\n                       'party_name': item.party_name,\n                       'warehouse_name': item.warehouse_name,\n                       'purchase_return_date': formatDate(item.purchase_return_date.split(' ')[0]),\n                       'total_supply': item.total_supply,\n                       'remain_amount': item.remain_amount\n                    }\n                }));\n                setTotal(parseInt(data.total_records));\n            } else {\n                toast.error(data.message);\n            }\n        }\n    }\n    const handleChange=(e)=>{\n        let query=`fetchPurchaseReturnList?page_number=${e.page_number}&page_size=${e.page_size}&filter_value=${e.filter_value}&to=${to_Date}&from=${from_Date}`;\n        if(e.sort_order){\n            let sort = JSON.stringify(e.sort_order);\n            query=`fetchPurchaseReturnList?page_number=${e.page_number}&page_size=${e.page_size}&filter_value=${e.filter_value}&sort_order=${sort}&to=${to_Date}&from=${from_Date}`;\n        }\n        fetchData(query);\n    }\n    return (\n        <section>\n            <ToastContainer />\n            <CustomModal modal={modal} setModal={setModal} deleteEntry={deleteEntry} />\n            <PayModal paymodal={paymodal} setPayModal={setPayModal} payAmount={payAmount} setPayAmount={setPayAmount} paymentMode={paymentMode} payBill={payBill} setPaymentMode={setPaymentMode}  />\n            <form onSubmit={(e)=>handleSubmit(e)}>\n            <div class=\"form-row create-purchase-header\">\n            <div class=\"form-group col-md-3\">\n            <label for=\"date\">From</label>\n            <input value={from_Date} onChange={e => setFromDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n            </div>\n            <div class=\"form-group col-md-3\">\n            <label for=\"date\">To</label>\n            <input value={to_Date} onChange={e => setToDate(e.target.value)} type=\"date\" class=\"form-control\" id=\"date\" required />\n            </div>\n            <div class=\"form-group col-md-3\">\n            <button type=\"Submit\" class=\"font-weight-bold my-4 py-2 px-4 btn btn-success\">Filter</button>\n            </div>\n            </div>\n            </form>\n            <ReactDatatable\n                    config={config}\n                    records={purchaseReturnList}\n                    columns={columns}\n                    total_record={total}\n                    onChange={(e)=>handleChange(e)}\n                    dynamic={true}\n                />\n                            \n        </section>\n    )\n}"],"sourceRoot":""}