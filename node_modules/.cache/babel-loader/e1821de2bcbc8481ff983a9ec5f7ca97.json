{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-observable\n\nvar $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar call = require('../internals/function-call');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar setSpecies = require('../internals/set-species');\n\nvar aCallable = require('../internals/a-callable');\n\nvar isCallable = require('../internals/is-callable');\n\nvar isConstructor = require('../internals/is-constructor');\n\nvar anObject = require('../internals/an-object');\n\nvar isObject = require('../internals/is-object');\n\nvar anInstance = require('../internals/an-instance');\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar redefine = require('../internals/redefine');\n\nvar redefineAll = require('../internals/redefine-all');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar getMethod = require('../internals/get-method');\n\nvar iterate = require('../internals/iterate');\n\nvar hostReportErrors = require('../internals/host-report-errors');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar $$OBSERVABLE = wellKnownSymbol('observable');\nvar OBSERVABLE = 'Observable';\nvar SUBSCRIPTION = 'Subscription';\nvar SUBSCRIPTION_OBSERVER = 'SubscriptionObserver';\nvar getterFor = InternalStateModule.getterFor;\nvar setInternalState = InternalStateModule.set;\nvar getObservableInternalState = getterFor(OBSERVABLE);\nvar getSubscriptionInternalState = getterFor(SUBSCRIPTION);\nvar getSubscriptionObserverInternalState = getterFor(SUBSCRIPTION_OBSERVER);\nvar Array = global.Array;\n\nvar SubscriptionState = function SubscriptionState(observer) {\n  this.observer = anObject(observer);\n  this.cleanup = undefined;\n  this.subscriptionObserver = undefined;\n};\n\nSubscriptionState.prototype = {\n  type: SUBSCRIPTION,\n  clean: function clean() {\n    var cleanup = this.cleanup;\n\n    if (cleanup) {\n      this.cleanup = undefined;\n\n      try {\n        cleanup();\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  close: function close() {\n    if (!DESCRIPTORS) {\n      var subscription = this.facade;\n      var subscriptionObserver = this.subscriptionObserver;\n      subscription.closed = true;\n      if (subscriptionObserver) subscriptionObserver.closed = true;\n    }\n\n    this.observer = undefined;\n  },\n  isClosed: function isClosed() {\n    return this.observer === undefined;\n  }\n};\n\nvar Subscription = function Subscription(observer, subscriber) {\n  var subscriptionState = setInternalState(this, new SubscriptionState(observer));\n  var start;\n  if (!DESCRIPTORS) this.closed = false;\n\n  try {\n    if (start = getMethod(observer, 'start')) call(start, observer, this);\n  } catch (error) {\n    hostReportErrors(error);\n  }\n\n  if (subscriptionState.isClosed()) return;\n  var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(subscriptionState);\n\n  try {\n    var cleanup = subscriber(subscriptionObserver);\n    var subscription = cleanup;\n    if (cleanup != null) subscriptionState.cleanup = isCallable(cleanup.unsubscribe) ? function () {\n      subscription.unsubscribe();\n    } : aCallable(cleanup);\n  } catch (error) {\n    subscriptionObserver.error(error);\n    return;\n  }\n\n  if (subscriptionState.isClosed()) subscriptionState.clean();\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() {\n    var subscriptionState = getSubscriptionInternalState(this);\n\n    if (!subscriptionState.isClosed()) {\n      subscriptionState.close();\n      subscriptionState.clean();\n    }\n  }\n});\nif (DESCRIPTORS) defineProperty(Subscription.prototype, 'closed', {\n  configurable: true,\n  get: function get() {\n    return getSubscriptionInternalState(this).isClosed();\n  }\n});\n\nvar SubscriptionObserver = function SubscriptionObserver(subscriptionState) {\n  setInternalState(this, {\n    type: SUBSCRIPTION_OBSERVER,\n    subscriptionState: subscriptionState\n  });\n  if (!DESCRIPTORS) this.closed = false;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n\n      try {\n        var nextMethod = getMethod(observer, 'next');\n        if (nextMethod) call(nextMethod, observer, value);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  error: function error(value) {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      subscriptionState.close();\n\n      try {\n        var errorMethod = getMethod(observer, 'error');\n        if (errorMethod) call(errorMethod, observer, value);else hostReportErrors(value);\n      } catch (err) {\n        hostReportErrors(err);\n      }\n\n      subscriptionState.clean();\n    }\n  },\n  complete: function complete() {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      subscriptionState.close();\n\n      try {\n        var completeMethod = getMethod(observer, 'complete');\n        if (completeMethod) call(completeMethod, observer);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n\n      subscriptionState.clean();\n    }\n  }\n});\nif (DESCRIPTORS) defineProperty(SubscriptionObserver.prototype, 'closed', {\n  configurable: true,\n  get: function get() {\n    return getSubscriptionObserverInternalState(this).subscriptionState.isClosed();\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, ObservablePrototype);\n  setInternalState(this, {\n    type: OBSERVABLE,\n    subscriber: aCallable(subscriber)\n  });\n};\n\nvar ObservablePrototype = $Observable.prototype;\nredefineAll(ObservablePrototype, {\n  subscribe: function subscribe(observer) {\n    var length = arguments.length;\n    return new Subscription(isCallable(observer) ? {\n      next: observer,\n      error: length > 1 ? arguments[1] : undefined,\n      complete: length > 2 ? arguments[2] : undefined\n    } : isObject(observer) ? observer : {}, getObservableInternalState(this).subscriber);\n  }\n});\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = isConstructor(this) ? this : $Observable;\n    var observableMethod = getMethod(anObject(x), $$OBSERVABLE);\n\n    if (observableMethod) {\n      var observable = anObject(call(observableMethod, x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n\n    var iterator = getIterator(x);\n    return new C(function (observer) {\n      iterate(iterator, function (it, stop) {\n        observer.next(it);\n        if (observer.closed) return stop();\n      }, {\n        IS_ITERATOR: true,\n        INTERRUPTED: true\n      });\n      observer.complete();\n    });\n  },\n  of: function of() {\n    var C = isConstructor(this) ? this : $Observable;\n    var length = arguments.length;\n    var items = Array(length);\n    var index = 0;\n\n    while (index < length) {\n      items[index] = arguments[index++];\n    }\n\n    return new C(function (observer) {\n      for (var i = 0; i < length; i++) {\n        observer.next(items[i]);\n        if (observer.closed) return;\n      }\n\n      observer.complete();\n    });\n  }\n});\nredefine(ObservablePrototype, $$OBSERVABLE, function () {\n  return this;\n});\n$({\n  global: true\n}, {\n  Observable: $Observable\n});\nsetSpecies(OBSERVABLE);","map":{"version":3,"sources":["/Volumes/Disk SSD/erp2.0/erp-2.0/frontend/node_modules/core-js/modules/esnext.observable.js"],"names":["$","require","global","call","DESCRIPTORS","setSpecies","aCallable","isCallable","isConstructor","anObject","isObject","anInstance","defineProperty","f","redefine","redefineAll","getIterator","getMethod","iterate","hostReportErrors","wellKnownSymbol","InternalStateModule","$$OBSERVABLE","OBSERVABLE","SUBSCRIPTION","SUBSCRIPTION_OBSERVER","getterFor","setInternalState","set","getObservableInternalState","getSubscriptionInternalState","getSubscriptionObserverInternalState","Array","SubscriptionState","observer","cleanup","undefined","subscriptionObserver","prototype","type","clean","error","close","subscription","facade","closed","isClosed","Subscription","subscriber","subscriptionState","start","SubscriptionObserver","unsubscribe","configurable","get","next","value","nextMethod","errorMethod","err","complete","completeMethod","$Observable","Observable","ObservablePrototype","subscribe","length","arguments","from","x","C","observableMethod","observable","constructor","iterator","it","stop","IS_ITERATOR","INTERRUPTED","of","items","index","i"],"mappings":"AAAA,a,CACA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIM,UAAU,GAAGN,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIO,aAAa,GAAGP,OAAO,CAAC,6BAAD,CAA3B;;AACA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIS,QAAQ,GAAGT,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIU,UAAU,GAAGV,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIW,cAAc,GAAGX,OAAO,CAAC,qCAAD,CAAP,CAA+CY,CAApE;;AACA,IAAIC,QAAQ,GAAGb,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAIc,WAAW,GAAGd,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIe,WAAW,GAAGf,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIgB,SAAS,GAAGhB,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIiB,OAAO,GAAGjB,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIkB,gBAAgB,GAAGlB,OAAO,CAAC,iCAAD,CAA9B;;AACA,IAAImB,eAAe,GAAGnB,OAAO,CAAC,gCAAD,CAA7B;;AACA,IAAIoB,mBAAmB,GAAGpB,OAAO,CAAC,6BAAD,CAAjC;;AAEA,IAAIqB,YAAY,GAAGF,eAAe,CAAC,YAAD,CAAlC;AACA,IAAIG,UAAU,GAAG,YAAjB;AACA,IAAIC,YAAY,GAAG,cAAnB;AACA,IAAIC,qBAAqB,GAAG,sBAA5B;AACA,IAAIC,SAAS,GAAGL,mBAAmB,CAACK,SAApC;AACA,IAAIC,gBAAgB,GAAGN,mBAAmB,CAACO,GAA3C;AACA,IAAIC,0BAA0B,GAAGH,SAAS,CAACH,UAAD,CAA1C;AACA,IAAIO,4BAA4B,GAAGJ,SAAS,CAACF,YAAD,CAA5C;AACA,IAAIO,oCAAoC,GAAGL,SAAS,CAACD,qBAAD,CAApD;AACA,IAAIO,KAAK,GAAG9B,MAAM,CAAC8B,KAAnB;;AAEA,IAAIC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,QAAV,EAAoB;AAC1C,OAAKA,QAAL,GAAgBzB,QAAQ,CAACyB,QAAD,CAAxB;AACA,OAAKC,OAAL,GAAeC,SAAf;AACA,OAAKC,oBAAL,GAA4BD,SAA5B;AACD,CAJD;;AAMAH,iBAAiB,CAACK,SAAlB,GAA8B;AAC5BC,EAAAA,IAAI,EAAEf,YADsB;AAE5BgB,EAAAA,KAAK,EAAE,iBAAY;AACjB,QAAIL,OAAO,GAAG,KAAKA,OAAnB;;AACA,QAAIA,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAeC,SAAf;;AACA,UAAI;AACFD,QAAAA,OAAO;AACR,OAFD,CAEE,OAAOM,KAAP,EAAc;AACdtB,QAAAA,gBAAgB,CAACsB,KAAD,CAAhB;AACD;AACF;AACF,GAZ2B;AAa5BC,EAAAA,KAAK,EAAE,iBAAY;AACjB,QAAI,CAACtC,WAAL,EAAkB;AAChB,UAAIuC,YAAY,GAAG,KAAKC,MAAxB;AACA,UAAIP,oBAAoB,GAAG,KAAKA,oBAAhC;AACAM,MAAAA,YAAY,CAACE,MAAb,GAAsB,IAAtB;AACA,UAAIR,oBAAJ,EAA0BA,oBAAoB,CAACQ,MAArB,GAA8B,IAA9B;AAC3B;;AAAC,SAAKX,QAAL,GAAgBE,SAAhB;AACH,GApB2B;AAqB5BU,EAAAA,QAAQ,EAAE,oBAAY;AACpB,WAAO,KAAKZ,QAAL,KAAkBE,SAAzB;AACD;AAvB2B,CAA9B;;AA0BA,IAAIW,YAAY,GAAG,SAAfA,YAAe,CAAUb,QAAV,EAAoBc,UAApB,EAAgC;AACjD,MAAIC,iBAAiB,GAAGtB,gBAAgB,CAAC,IAAD,EAAO,IAAIM,iBAAJ,CAAsBC,QAAtB,CAAP,CAAxC;AACA,MAAIgB,KAAJ;AACA,MAAI,CAAC9C,WAAL,EAAkB,KAAKyC,MAAL,GAAc,KAAd;;AAClB,MAAI;AACF,QAAIK,KAAK,GAAGjC,SAAS,CAACiB,QAAD,EAAW,OAAX,CAArB,EAA0C/B,IAAI,CAAC+C,KAAD,EAAQhB,QAAR,EAAkB,IAAlB,CAAJ;AAC3C,GAFD,CAEE,OAAOO,KAAP,EAAc;AACdtB,IAAAA,gBAAgB,CAACsB,KAAD,CAAhB;AACD;;AACD,MAAIQ,iBAAiB,CAACH,QAAlB,EAAJ,EAAkC;AAClC,MAAIT,oBAAoB,GAAGY,iBAAiB,CAACZ,oBAAlB,GAAyC,IAAIc,oBAAJ,CAAyBF,iBAAzB,CAApE;;AACA,MAAI;AACF,QAAId,OAAO,GAAGa,UAAU,CAACX,oBAAD,CAAxB;AACA,QAAIM,YAAY,GAAGR,OAAnB;AACA,QAAIA,OAAO,IAAI,IAAf,EAAqBc,iBAAiB,CAACd,OAAlB,GAA4B5B,UAAU,CAAC4B,OAAO,CAACiB,WAAT,CAAV,GAC7C,YAAY;AAAET,MAAAA,YAAY,CAACS,WAAb;AAA6B,KADE,GAE7C9C,SAAS,CAAC6B,OAAD,CAFQ;AAGtB,GAND,CAME,OAAOM,KAAP,EAAc;AACdJ,IAAAA,oBAAoB,CAACI,KAArB,CAA2BA,KAA3B;AACA;AACD;;AAAC,MAAIQ,iBAAiB,CAACH,QAAlB,EAAJ,EAAkCG,iBAAiB,CAACT,KAAlB;AACrC,CArBD;;AAuBAO,YAAY,CAACT,SAAb,GAAyBvB,WAAW,CAAC,EAAD,EAAK;AACvCqC,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,QAAIH,iBAAiB,GAAGnB,4BAA4B,CAAC,IAAD,CAApD;;AACA,QAAI,CAACmB,iBAAiB,CAACH,QAAlB,EAAL,EAAmC;AACjCG,MAAAA,iBAAiB,CAACP,KAAlB;AACAO,MAAAA,iBAAiB,CAACT,KAAlB;AACD;AACF;AAPsC,CAAL,CAApC;AAUA,IAAIpC,WAAJ,EAAiBQ,cAAc,CAACmC,YAAY,CAACT,SAAd,EAAyB,QAAzB,EAAmC;AAChEe,EAAAA,YAAY,EAAE,IADkD;AAEhEC,EAAAA,GAAG,EAAE,eAAY;AACf,WAAOxB,4BAA4B,CAAC,IAAD,CAA5B,CAAmCgB,QAAnC,EAAP;AACD;AAJ+D,CAAnC,CAAd;;AAOjB,IAAIK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUF,iBAAV,EAA6B;AACtDtB,EAAAA,gBAAgB,CAAC,IAAD,EAAO;AACrBY,IAAAA,IAAI,EAAEd,qBADe;AAErBwB,IAAAA,iBAAiB,EAAEA;AAFE,GAAP,CAAhB;AAIA,MAAI,CAAC7C,WAAL,EAAkB,KAAKyC,MAAL,GAAc,KAAd;AACnB,CAND;;AAQAM,oBAAoB,CAACb,SAArB,GAAiCvB,WAAW,CAAC,EAAD,EAAK;AAC/CwC,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACzB,QAAIP,iBAAiB,GAAGlB,oCAAoC,CAAC,IAAD,CAApC,CAA2CkB,iBAAnE;;AACA,QAAI,CAACA,iBAAiB,CAACH,QAAlB,EAAL,EAAmC;AACjC,UAAIZ,QAAQ,GAAGe,iBAAiB,CAACf,QAAjC;;AACA,UAAI;AACF,YAAIuB,UAAU,GAAGxC,SAAS,CAACiB,QAAD,EAAW,MAAX,CAA1B;AACA,YAAIuB,UAAJ,EAAgBtD,IAAI,CAACsD,UAAD,EAAavB,QAAb,EAAuBsB,KAAvB,CAAJ;AACjB,OAHD,CAGE,OAAOf,KAAP,EAAc;AACdtB,QAAAA,gBAAgB,CAACsB,KAAD,CAAhB;AACD;AACF;AACF,GAZ8C;AAa/CA,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAee,KAAf,EAAsB;AAC3B,QAAIP,iBAAiB,GAAGlB,oCAAoC,CAAC,IAAD,CAApC,CAA2CkB,iBAAnE;;AACA,QAAI,CAACA,iBAAiB,CAACH,QAAlB,EAAL,EAAmC;AACjC,UAAIZ,QAAQ,GAAGe,iBAAiB,CAACf,QAAjC;AACAe,MAAAA,iBAAiB,CAACP,KAAlB;;AACA,UAAI;AACF,YAAIgB,WAAW,GAAGzC,SAAS,CAACiB,QAAD,EAAW,OAAX,CAA3B;AACA,YAAIwB,WAAJ,EAAiBvD,IAAI,CAACuD,WAAD,EAAcxB,QAAd,EAAwBsB,KAAxB,CAAJ,CAAjB,KACKrC,gBAAgB,CAACqC,KAAD,CAAhB;AACN,OAJD,CAIE,OAAOG,GAAP,EAAY;AACZxC,QAAAA,gBAAgB,CAACwC,GAAD,CAAhB;AACD;;AAACV,MAAAA,iBAAiB,CAACT,KAAlB;AACH;AACF,GA1B8C;AA2B/CoB,EAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,QAAIX,iBAAiB,GAAGlB,oCAAoC,CAAC,IAAD,CAApC,CAA2CkB,iBAAnE;;AACA,QAAI,CAACA,iBAAiB,CAACH,QAAlB,EAAL,EAAmC;AACjC,UAAIZ,QAAQ,GAAGe,iBAAiB,CAACf,QAAjC;AACAe,MAAAA,iBAAiB,CAACP,KAAlB;;AACA,UAAI;AACF,YAAImB,cAAc,GAAG5C,SAAS,CAACiB,QAAD,EAAW,UAAX,CAA9B;AACA,YAAI2B,cAAJ,EAAoB1D,IAAI,CAAC0D,cAAD,EAAiB3B,QAAjB,CAAJ;AACrB,OAHD,CAGE,OAAOO,KAAP,EAAc;AACdtB,QAAAA,gBAAgB,CAACsB,KAAD,CAAhB;AACD;;AAACQ,MAAAA,iBAAiB,CAACT,KAAlB;AACH;AACF;AAvC8C,CAAL,CAA5C;AA0CA,IAAIpC,WAAJ,EAAiBQ,cAAc,CAACuC,oBAAoB,CAACb,SAAtB,EAAiC,QAAjC,EAA2C;AACxEe,EAAAA,YAAY,EAAE,IAD0D;AAExEC,EAAAA,GAAG,EAAE,eAAY;AACf,WAAOvB,oCAAoC,CAAC,IAAD,CAApC,CAA2CkB,iBAA3C,CAA6DH,QAA7D,EAAP;AACD;AAJuE,CAA3C,CAAd;;AAOjB,IAAIgB,WAAW,GAAG,SAASC,UAAT,CAAoBf,UAApB,EAAgC;AAChDrC,EAAAA,UAAU,CAAC,IAAD,EAAOqD,mBAAP,CAAV;AACArC,EAAAA,gBAAgB,CAAC,IAAD,EAAO;AACrBY,IAAAA,IAAI,EAAEhB,UADe;AAErByB,IAAAA,UAAU,EAAE1C,SAAS,CAAC0C,UAAD;AAFA,GAAP,CAAhB;AAID,CAND;;AAQA,IAAIgB,mBAAmB,GAAGF,WAAW,CAACxB,SAAtC;AAEAvB,WAAW,CAACiD,mBAAD,EAAsB;AAC/BC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmB/B,QAAnB,EAA6B;AACtC,QAAIgC,MAAM,GAAGC,SAAS,CAACD,MAAvB;AACA,WAAO,IAAInB,YAAJ,CAAiBxC,UAAU,CAAC2B,QAAD,CAAV,GAAuB;AAC7CqB,MAAAA,IAAI,EAAErB,QADuC;AAE7CO,MAAAA,KAAK,EAAEyB,MAAM,GAAG,CAAT,GAAaC,SAAS,CAAC,CAAD,CAAtB,GAA4B/B,SAFU;AAG7CwB,MAAAA,QAAQ,EAAEM,MAAM,GAAG,CAAT,GAAaC,SAAS,CAAC,CAAD,CAAtB,GAA4B/B;AAHO,KAAvB,GAIpB1B,QAAQ,CAACwB,QAAD,CAAR,GAAqBA,QAArB,GAAgC,EAJ7B,EAIiCL,0BAA0B,CAAC,IAAD,CAA1B,CAAiCmB,UAJlE,CAAP;AAKD;AAR8B,CAAtB,CAAX;AAWAjC,WAAW,CAAC+C,WAAD,EAAc;AACvBM,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,CAAd,EAAiB;AACrB,QAAIC,CAAC,GAAG9D,aAAa,CAAC,IAAD,CAAb,GAAsB,IAAtB,GAA6BsD,WAArC;AACA,QAAIS,gBAAgB,GAAGtD,SAAS,CAACR,QAAQ,CAAC4D,CAAD,CAAT,EAAc/C,YAAd,CAAhC;;AACA,QAAIiD,gBAAJ,EAAsB;AACpB,UAAIC,UAAU,GAAG/D,QAAQ,CAACN,IAAI,CAACoE,gBAAD,EAAmBF,CAAnB,CAAL,CAAzB;AACA,aAAOG,UAAU,CAACC,WAAX,KAA2BH,CAA3B,GAA+BE,UAA/B,GAA4C,IAAIF,CAAJ,CAAM,UAAUpC,QAAV,EAAoB;AAC3E,eAAOsC,UAAU,CAACP,SAAX,CAAqB/B,QAArB,CAAP;AACD,OAFkD,CAAnD;AAGD;;AACD,QAAIwC,QAAQ,GAAG1D,WAAW,CAACqD,CAAD,CAA1B;AACA,WAAO,IAAIC,CAAJ,CAAM,UAAUpC,QAAV,EAAoB;AAC/BhB,MAAAA,OAAO,CAACwD,QAAD,EAAW,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AACpC1C,QAAAA,QAAQ,CAACqB,IAAT,CAAcoB,EAAd;AACA,YAAIzC,QAAQ,CAACW,MAAb,EAAqB,OAAO+B,IAAI,EAAX;AACtB,OAHM,EAGJ;AAAEC,QAAAA,WAAW,EAAE,IAAf;AAAqBC,QAAAA,WAAW,EAAE;AAAlC,OAHI,CAAP;AAIA5C,MAAAA,QAAQ,CAAC0B,QAAT;AACD,KANM,CAAP;AAOD,GAlBsB;AAmBvBmB,EAAAA,EAAE,EAAE,SAASA,EAAT,GAAc;AAChB,QAAIT,CAAC,GAAG9D,aAAa,CAAC,IAAD,CAAb,GAAsB,IAAtB,GAA6BsD,WAArC;AACA,QAAII,MAAM,GAAGC,SAAS,CAACD,MAAvB;AACA,QAAIc,KAAK,GAAGhD,KAAK,CAACkC,MAAD,CAAjB;AACA,QAAIe,KAAK,GAAG,CAAZ;;AACA,WAAOA,KAAK,GAAGf,MAAf;AAAuBc,MAAAA,KAAK,CAACC,KAAD,CAAL,GAAed,SAAS,CAACc,KAAK,EAAN,CAAxB;AAAvB;;AACA,WAAO,IAAIX,CAAJ,CAAM,UAAUpC,QAAV,EAAoB;AAC/B,WAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,MAApB,EAA4BgB,CAAC,EAA7B,EAAiC;AAC/BhD,QAAAA,QAAQ,CAACqB,IAAT,CAAcyB,KAAK,CAACE,CAAD,CAAnB;AACA,YAAIhD,QAAQ,CAACW,MAAb,EAAqB;AACtB;;AAACX,MAAAA,QAAQ,CAAC0B,QAAT;AACH,KALM,CAAP;AAMD;AA/BsB,CAAd,CAAX;AAkCA9C,QAAQ,CAACkD,mBAAD,EAAsB1C,YAAtB,EAAoC,YAAY;AAAE,SAAO,IAAP;AAAc,CAAhE,CAAR;AAEAtB,CAAC,CAAC;AAAEE,EAAAA,MAAM,EAAE;AAAV,CAAD,EAAmB;AAClB6D,EAAAA,UAAU,EAAED;AADM,CAAnB,CAAD;AAIAzD,UAAU,CAACkB,UAAD,CAAV","sourcesContent":["'use strict';\n// https://github.com/tc39/proposal-observable\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar setSpecies = require('../internals/set-species');\nvar aCallable = require('../internals/a-callable');\nvar isCallable = require('../internals/is-callable');\nvar isConstructor = require('../internals/is-constructor');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar anInstance = require('../internals/an-instance');\nvar defineProperty = require('../internals/object-define-property').f;\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar getIterator = require('../internals/get-iterator');\nvar getMethod = require('../internals/get-method');\nvar iterate = require('../internals/iterate');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar $$OBSERVABLE = wellKnownSymbol('observable');\nvar OBSERVABLE = 'Observable';\nvar SUBSCRIPTION = 'Subscription';\nvar SUBSCRIPTION_OBSERVER = 'SubscriptionObserver';\nvar getterFor = InternalStateModule.getterFor;\nvar setInternalState = InternalStateModule.set;\nvar getObservableInternalState = getterFor(OBSERVABLE);\nvar getSubscriptionInternalState = getterFor(SUBSCRIPTION);\nvar getSubscriptionObserverInternalState = getterFor(SUBSCRIPTION_OBSERVER);\nvar Array = global.Array;\n\nvar SubscriptionState = function (observer) {\n  this.observer = anObject(observer);\n  this.cleanup = undefined;\n  this.subscriptionObserver = undefined;\n};\n\nSubscriptionState.prototype = {\n  type: SUBSCRIPTION,\n  clean: function () {\n    var cleanup = this.cleanup;\n    if (cleanup) {\n      this.cleanup = undefined;\n      try {\n        cleanup();\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  close: function () {\n    if (!DESCRIPTORS) {\n      var subscription = this.facade;\n      var subscriptionObserver = this.subscriptionObserver;\n      subscription.closed = true;\n      if (subscriptionObserver) subscriptionObserver.closed = true;\n    } this.observer = undefined;\n  },\n  isClosed: function () {\n    return this.observer === undefined;\n  }\n};\n\nvar Subscription = function (observer, subscriber) {\n  var subscriptionState = setInternalState(this, new SubscriptionState(observer));\n  var start;\n  if (!DESCRIPTORS) this.closed = false;\n  try {\n    if (start = getMethod(observer, 'start')) call(start, observer, this);\n  } catch (error) {\n    hostReportErrors(error);\n  }\n  if (subscriptionState.isClosed()) return;\n  var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(subscriptionState);\n  try {\n    var cleanup = subscriber(subscriptionObserver);\n    var subscription = cleanup;\n    if (cleanup != null) subscriptionState.cleanup = isCallable(cleanup.unsubscribe)\n      ? function () { subscription.unsubscribe(); }\n      : aCallable(cleanup);\n  } catch (error) {\n    subscriptionObserver.error(error);\n    return;\n  } if (subscriptionState.isClosed()) subscriptionState.clean();\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() {\n    var subscriptionState = getSubscriptionInternalState(this);\n    if (!subscriptionState.isClosed()) {\n      subscriptionState.close();\n      subscriptionState.clean();\n    }\n  }\n});\n\nif (DESCRIPTORS) defineProperty(Subscription.prototype, 'closed', {\n  configurable: true,\n  get: function () {\n    return getSubscriptionInternalState(this).isClosed();\n  }\n});\n\nvar SubscriptionObserver = function (subscriptionState) {\n  setInternalState(this, {\n    type: SUBSCRIPTION_OBSERVER,\n    subscriptionState: subscriptionState\n  });\n  if (!DESCRIPTORS) this.closed = false;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      try {\n        var nextMethod = getMethod(observer, 'next');\n        if (nextMethod) call(nextMethod, observer, value);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  error: function error(value) {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      subscriptionState.close();\n      try {\n        var errorMethod = getMethod(observer, 'error');\n        if (errorMethod) call(errorMethod, observer, value);\n        else hostReportErrors(value);\n      } catch (err) {\n        hostReportErrors(err);\n      } subscriptionState.clean();\n    }\n  },\n  complete: function complete() {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      subscriptionState.close();\n      try {\n        var completeMethod = getMethod(observer, 'complete');\n        if (completeMethod) call(completeMethod, observer);\n      } catch (error) {\n        hostReportErrors(error);\n      } subscriptionState.clean();\n    }\n  }\n});\n\nif (DESCRIPTORS) defineProperty(SubscriptionObserver.prototype, 'closed', {\n  configurable: true,\n  get: function () {\n    return getSubscriptionObserverInternalState(this).subscriptionState.isClosed();\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, ObservablePrototype);\n  setInternalState(this, {\n    type: OBSERVABLE,\n    subscriber: aCallable(subscriber)\n  });\n};\n\nvar ObservablePrototype = $Observable.prototype;\n\nredefineAll(ObservablePrototype, {\n  subscribe: function subscribe(observer) {\n    var length = arguments.length;\n    return new Subscription(isCallable(observer) ? {\n      next: observer,\n      error: length > 1 ? arguments[1] : undefined,\n      complete: length > 2 ? arguments[2] : undefined\n    } : isObject(observer) ? observer : {}, getObservableInternalState(this).subscriber);\n  }\n});\n\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = isConstructor(this) ? this : $Observable;\n    var observableMethod = getMethod(anObject(x), $$OBSERVABLE);\n    if (observableMethod) {\n      var observable = anObject(call(observableMethod, x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n    var iterator = getIterator(x);\n    return new C(function (observer) {\n      iterate(iterator, function (it, stop) {\n        observer.next(it);\n        if (observer.closed) return stop();\n      }, { IS_ITERATOR: true, INTERRUPTED: true });\n      observer.complete();\n    });\n  },\n  of: function of() {\n    var C = isConstructor(this) ? this : $Observable;\n    var length = arguments.length;\n    var items = Array(length);\n    var index = 0;\n    while (index < length) items[index] = arguments[index++];\n    return new C(function (observer) {\n      for (var i = 0; i < length; i++) {\n        observer.next(items[i]);\n        if (observer.closed) return;\n      } observer.complete();\n    });\n  }\n});\n\nredefine(ObservablePrototype, $$OBSERVABLE, function () { return this; });\n\n$({ global: true }, {\n  Observable: $Observable\n});\n\nsetSpecies(OBSERVABLE);\n"]},"metadata":{},"sourceType":"script"}